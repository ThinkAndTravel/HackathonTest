<!DOCTYPE html>
<html>
<head>
</head>
<body>
    <h2>Курс BitCoin</h2>
    <meta charset="utf-8">
    <script src="http://d3js.org/d3.v3.min.js"> </script>
    <style>
        .axis path, .axis line {
            fill: none;
            stroke: #333;
        }

        .axis .grid-line {
            stroke: #000;
            shape-rendering: crispedges;
            stroke-opacity: 0.2;
        }

        .axis text {
            font: 10px Verdana;
        }
    </style>
    <script type="text/javascript">
        var height = 500;
        var width = 1200;
        var margin = 50;
        var offset = 50;
        var xAxisLength = width - 2 * margin;
        var yAxisLength = height - 2 * margin;
        var rawData = [
                {x: new Date(2018,0,22,0,15) , y: 10000}, {x: new Date(2018,0,22,2,15) , y: 13786},
		        {x: new Date(2018,0,22,3,0) , y: 11500}, {x: new Date(), y: 12000}
            ],
            data=[];
        var rawData1 = [
                {x:new Date(2018,0,22,0,0) , y: 10000}, {x:new Date(2018,0,22,2,15) , y: 12000},
		        {x: new Date(2018,0,22,3,30), y: 11873}, {x: new Date(), y: 14000}
            ],
            data1=[];
        var svg = d3.select("body").append("svg")
            .attr("class", "axis")
            .attr("width", width)
            .attr("height", height);

    // функция интерполяции времени на оси
        var scaleX = d3.time.scale() // от 1 января 2015 года до текущей даты
                    .domain([new Date(2018, 0, 22), new Date()])
                    .range([0, xAxisLength]);


        var scaleY = d3.scale.linear()
                    .domain([14000, 10000])
                    .range([0, yAxisLength]);

        var xAxis = d3.svg.axis()
                    .scale(scaleX)
                    .orient('bottom')
                    .ticks(30)
				    .tickFormat(d3.time.format('%H:%M'));

    	var yAxis = d3.svg.axis()
                    .scale(scaleY)
                    .orient("left")
			        .ticks(15);

	    for(i=0; i<rawData.length; i++)
		    data.push({x: scaleX(rawData[i].x)+margin, y: scaleY(rawData[i].y) + margin});

	    for(i=0; i<rawData1.length; i++)
		    data1.push({x: scaleX(rawData1[i].x)+margin, y: scaleY(rawData1[i].y) + margin});

	    svg.append("g")
		    .attr("class", "x-axis")
            .attr("transform", "translate("+margin+","+(height-margin)+")")
            .call(xAxis);

	    svg.append("g")
		    .attr("class", "y-axis")
		    .attr("transform", // сдвиг оси вниз и вправо на margin
                "translate(" + margin + "," + margin + ")")
		    .call(yAxis);

		// рисуем горизонтальные линии
    	d3.selectAll("g.y-axis g.tick")
	    	.append("line")
		    .classed("grid-line", true)
		    .attr("x1", 0)
		    .attr("y1", 0)
		    .attr("x2", xAxisLength)
		    .attr("y2", 0);

        // создаем набор вертикальных линий для сетки
	    d3.selectAll("g.x-axis g.tick")
		    .append("line") // добавляем линию
		    .classed("grid-line", true) // добавляем класс
		    .attr("x1", 0)
		    .attr("y1", 0)
		    .attr("x2", 0)
		    .attr("y2", - (yAxisLength));

	    var line = d3.svg.line()
                .x(function(d){return d.x;})
                .y(function(d){return d.y;});
        // добавляем путь
	    svg.append("g").append("path")
	    .attr("d", line(data))
	    .style("stroke", "steelblue")
	    .style("stroke-width", 2);

	    svg.append("g").append("path")
	    .attr("d", line(data1))
	    .style("stroke", "#00ff21")
            .style("stroke-width", 2);
    </script>
</body>
</html>